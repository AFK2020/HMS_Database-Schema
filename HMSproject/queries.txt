
## Queries

1. Retrieve all **appointments** along with their **related patient and doctor** details, but only for appointments scheduled in the **next 7 days**.

obj = Appointment.objects.filter(appointment_date__range = ["2025-3-20","2025-3-27"])

2. Get all **patients** who **do not have insurance** and have had **at least one appointment in the past month**.

today = timezone.now().date()
one_month_ago = today - timedelta(days=30)
patients = Patient.objects.filter(
app_p_id__appointment_date__gte=one_month_ago,
app_p_id__appointment_date__lte= today,
insuarance_pt__isnull=True # No insurance (insurance related to patient is null)
)
patient_data = [{"id": patient.id, "name": patient.name} for patient in patients]

3. Find all **doctors** who have handled **more than  3 appointments** in the last **6 months**.
 
today = timezone.now().date()
six_month_ago = today - timedelta(days=30*6)
doctors = Doctor.objects.annotate(count=Count('app_dr_id__id')).filter(
app_dr_id__appointment_date__gte = six_month_ago,
app_dr_id__appointment_date__lte = today,
count__gte = 3
)

4. Update the **appointment status** to `"Missed"` where the **appointment date** is in the past and the **status is still "Scheduled"**.

today = timezone.now().date()
Appointment.objects.filter(
appointment_date__lt = today,
status = AppointmentStatus.SCHEDULED
).update(status = AppointmentStatus.MISSED)

5. Calculate the **total cost of all surgeries** for **each patient**, but only for patients who have undergone **more than one surgery**.
There was never a cost field

6. Retrieve a list of **distinct insurance providers** that have **at least one active patient**, ordered **alphabetically**.


    insuarance_providers = Insuarance.objects.filter(
        patient_id__isnull = False
    ).order_by("provider")

    provider_data = [
        {
            "name": provider.provider, 
            # "date": [d.appointment_date for d in doctor.app_dr_id.all()],
        } for provider in insuarance_providers
     ]


7. Find **departments** that have **at least 3 doctors** but **no head doctor assigned**.


    departments = Department.objects.annotate(count = Count("dr_to_dept")).filter(
        count__gte = 3 
    )
    dept_data = [
        {
            "name" : dept.name,
            "doctor" : [d.name for d in dept.dr_to_dept.all()]
    } for dept in departments
    ]

8. Calculate the **total amount billed** for all **patients** who had a **surgery in the last month** and do **not have insurance**.
9. Retrieve all **patients with their prescriptions**, but only if they had an **appointment in the last 30 days**, and order by the **most recent appointment**.
10. Increase the **fees** of all **doctors** by **15%** if they have **handled more than 20 appointments in the last year**.
11. Find the **average age of patients** who have had **at least one surgery** but have **never had an appointment**.
    patients = Patient.objects.annotate(
        surgery_count = Count("surgery_patient"),
        appointment_count = Count("appointments")
    ).filter(
        surgery_count__gte =1,
        appointment_count = 0
    )

    patient_data = [
        {
            "name" : p.name,
    } for p in patients
    ]


12. **Bulk create** new **appointments** for all **patients** who have visited **a specific doctor**, ensuring they are not **already scheduled**.



13. Retrieve the **number of prescriptions written** by each doctor, but only include doctors who have **written at least 5 prescriptions**.
    result = (Doctor.objects.values('name').annotate(no_of_prescriptions = Count("pres_dr_id")).order_by().filter(
        no_of_prescriptions__gte =5
    ))
    doctor_data = [
        {  
            "Doctor name" : r['name'] ,
            "Numeber of Precription" : r['no_of_prescriptions']
    } for r in result
    ]


14. Retrieve **appointments** where the **patientâ€™s insurance provider is "XYZ Insurance"**, but exclude appointments scheduled for **Sunday**.

    patients= Patient.objects.filter(
        insuarance_pt__provider = 'MassMutual'
    ).values_list('name', flat=True)

    appointments = Appointment.objects.filter(
        patient_name__name__in=patients,
        status = AppointmentStatus.SCHEDULED.value
        ).annotate(
            weekday= ExtractWeekDay("appointment_date")
            ).exclude(weekday__in = [7])
    appointment_data = [
        {
        "Patient_name" : a.patient_name.name,
        "Status" : a.status,
        "Priority" : a.type,
        } for a in appointments
    ]


15. Update the **priority** of appointments:
- If **scheduled within 3 months**, set as `"High"`
- If **between 3-5 months**, set as `"Medium"`
- less than 6 months, set as `"Low"`.

    today = timezone.now().date()
    six_months = today - timedelta(days=30*6)
    three_months = today -timedelta(days=30*3)
    
    Appointment.objects.filter(
        appointment_date__lt=six_months,
    ).update(type=AppointmentType.LOW.value)

    Appointment.objects.filter(
        appointment_date__lte=three_months,
        appointment_date__gte=six_months,
    ).update(type=AppointmentType.MEDIUM.value)

    Appointment.objects.filter(
        appointment_date__gt=three_months,
    ).update(type=AppointmentType.HIGH.value)


1. Retrieve a list of **doctor IDs** who have handled **at least 5 surgeries** in the **past year**.


    doctors = Doctor.objects.annotate(surgery_count = Count("surgery_doctor")).filter(
        surgery_count__gte = 3
    )
    doctor_data=[
        {   "Doctor name" : id.name,
            "Doctor id": id.id}
        for id in doctors
        ]
    

2. Get a **union** of all **patients who have at least one appointment** and **patients who have at least one surgery**.

    query1 = Patient.objects.filter(
        app_p_id__isnull = False
    )
    query2 = Patient.objects.filter(
        surgery_patient__isnull = False
    )
    records = (query1 | query2).distinct()
    patient_data=[
        {   "Patient name" : id.name,
            "Patient id": id.id}
        for id in records
        ]
    


3. Retrieve all **doctors who have both an appointment and wrote a prescription**.


    query1_prescription = Doctor.objects.filter(
        pres_dr_id__isnull= False
    )
    query2_appointment = Doctor.objects.filter(
        app_dr_id__isnull = False
    )
    records = (query1_prescription | query2_appointment).distinct()
    doctor_data=[
        {   "Doctor name" : id.name,
            "Doctor id": id.id}
        for id in records
        ]

4. Find all **patients who have appointments but no prescriptions**.



5. Retrieve **all patients with their doctors**, but **only include patients who have visited more than one doctor** and **exclude those who have insurance**.

in many to many relatiobships we get manager back as one row is connected to multiple rows hence we used .all()

same is the case reverse_name for foreign key because we get one to many relationship 

    patients = Patient.objects.annotate(doctor_count=Count("doctor")).filter(
        doctor_count__gte=2, insuarance_pt__isnull=True
    )
    data = [
        {"Patient name": id.name, "Doctor name": [d.name for d in id.doctor.all()]}
        for id in patients
    ]
    return JsonResponse({"Patients_and_Doctors": data})



6. Get a **list of unique doctor specializations**, ordered **by the number of doctors in each specialization**.

    doctors = Doctor.objects.values('specialization').annotate(count = Count("specialization")).order_by('count')
    data = [
        {"Doctor count": doctor['count'],
         "Doctor Specialization": doctor['specialization'] ,

         }
        for doctor in doctors
    ]

7. Find **total revenue** generated from **appointments in the last 3 months**, but only from doctors specializing in **Cardiology or Surgery**.
8. Retrieve all **patients** who have received **at least one prescription** containing the word **"Painkiller"**.

    prescription_obj = Prescription.objects.filter(medicine_details__contains = "pain killer").distinct()
    data = [
    {"patient_name" : prescription.appointment.patient_name.name
                       }
    for prescription in prescription_obj
    ]

9. Find all **doctors** who have had **more than 5 patients but less than 15** in the last **year**.

    doctors = Doctor.objects.annotate(patient_count = Count("doctor_patients")).filter(
    patient_count__gte=5,
    patient_count__lte = 10
    )
    doctor_data =[
        {
            "Doctor Name" : doctor.name
        } for doctor in doctors
    ]


10. **Bulk create** test **appointments** and then **bulk update** their **status** to `"Completed"` if the **appointment date has passed**.


11. Find all **patients who have insurance and at least one surgery** using `select_related`, `filter`, and `Q`.

   patients = Patient.objects.prefetch_related("insuarance_pt").filter(
        Q(surgery_patient__isnull = False) & Q(insuarance_pt__isnull = False)
    ).distinct()

    patient_data = [
        {
            "Patient name" : patient.name
        } for patient in patients
    ]

12. Retrieve all **doctors and count their appointments** using `annotate`, `Count`, and `prefetch_related`.
    doctors = Doctor.objects.prefetch_related("app_dr_id").annotate(
        appointment_count = Count('app_dr_id')).order_by("-appointment_count")

    doctor_data = [
        {
            "Doctor Name" : doctor.name,
            "No. of appointments" : doctor.appointment_count
        } for doctor in doctors
    ]


13. List all **appointments scheduled in the next 30 days** using `filter` and `order_by`.


14. Retrieve the **youngest and oldest patient** using `aggregate`, `Min`, and `Max`.

    patients = Patient.objects.order_by('-dob')
    youngest = patients.first()
    oldest = patients.last()

    data = [
        {
            "Youngest Name": youngest.name,
            "Youngest Age" : youngest.age
        },
        {
        
            "Oldest Name": oldest.name,
            "Oldest Age" : oldest.age  
        }
    ]

15. Find **departments with the most doctors** using `annotate`, `Count`, and `order_by`.
    
    departments = Department.objects.annotate(count=Count("dr_to_dept")).order_by('-count')
    dept_data = [
        {"Department name": dept.name,
         "Dr Count" : dept.count
         }
        for dept in departments
    ]

16. Retrieve all **appointments where the doctor's specialization is "Cardiology"** using `select_related` and `filter`.

   appointments = Appointment.objects.select_related('doctor').filter(
        doctor__specialization = 'Cardiologist'
    )
    appointment_data = [
        {"Patient name": app.patient_name.name,
         "Doctor Name" : app.doctor.name
         }
        for app in appointments
    ]


17. Find **patients who had an appointment but no surgery** using `difference`.



18. Retrieve **all head doctors of departments** using `select_related`.

    dr = Department.objects.select_related('head_doctor').filter(
        head_doctor__isnull = False
    )
    doctor_data = [
        {"Head Doctor name": dept.head_doctor.name,
         "Department" : dept.name
         }
        for dept in dr 
    ]


19. Count the **total number of surgeries** by **each departm'ent** using `annotate` and `Count`.
20. Find **patients who had an appointment and a surgery** using `intersection`.
21. Retrieve **prescriptions written in the last 7 days** using `filter` and `Q`.
22. Get all **insurance providers that cover more than 5 patients** using `values` and `annotate`.
23. Find all **doctors who have prescribed at least 10 medicines** using `annotate` and `Count`.
24. Retrieve **all patients whose last name starts with 'S'** using `filter`.
25. Count the **number of male and female patients** using `annotate`.
26. Find **the doctor who has performed the most surgeries** using `annotate` and `order_by`.
27. Get **appointments where the patient has visited the same doctor more than once** using `annotate` and `filter`.
28. List all **departments along with the number of surgeries performed** using `annotate`.
29. Retrieve **appointments where the patient and doctor are the same gender** using `F`.
30. Count the **number of doctors with more than 3 specializations** using `Count`.
31. Find all **patients who do not have a phone number** using `exclude`.
32. Retrieve the **top 5 doctors with the highest number of patients** using `annotate`.
33. Get **departments that have at least 10 doctors** using `annotate` and `filter`.
34. Find **patients who had a surgery but no prescriptions** using `difference`.
35. Retrieve **the most prescribed medicine** using `values`, `annotate`, and `Count`.
